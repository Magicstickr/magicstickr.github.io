<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - SHNOWMAN COLORING</title>
		<meta charset="utf-8">
		<style>
			body {
				margin: 0px;
				color: #fff;
				font-family:Monospace;
				text-align: center;
				font-size: 15px;
				line-height: 30px;
				overflow: hidden;
			}
			#info {
				position: absolute;
				top: 0px; width: 100%;
				padding: 15px;
				z-index:100;
				color: black;
			}
		</style>
	</head>
	<body>
		<div id="info">
			<a href="http://threejs.org" target="_blank">three.js</a> - SHNOWMAN COLORING GAME
		</div>

		<script src="lib/three.js"></script>
		<script src="lib/OrbitControls.js"></script>		
		<script src="lib/Brush.js"></script>

		<script>


			var camera, scene, renderer, controls;
			var objects = [];
			var banks = [];
			var count = 10;
			var raycaster = new THREE.Raycaster();
			var Brush;
			var colors = [];
			var colorsRight = [];			

			init();
			animate();

			function init() {

				renderer = new THREE.WebGLRenderer( { antialias: true } ); 
				renderer.setClearColor( 0xffffff );
				//renderer.setSize( 800, 500 );
				renderer.setSize( window.innerWidth, window.innerHeight );				
				document.body.appendChild( renderer.domElement );

				//

				camera = new THREE.PerspectiveCamera( 30, window.innerWidth / window.innerHeight, 1, 2000 );
				camera.position.set( 0, 0, 350 );
				camera.lookAt( new THREE.Vector3( 0, 0, 0 ) );

				// controls = new THREE.OrbitControls( camera, renderer.domElement );
				// controls.rotateSpeed = 1;
				// controls.noZoom = false;
				// controls.zoomSpeed = 1.2;
				// controls.staticMoving = true;
				// controls.minPolarAngle = Math.PI / 2.5;
				// controls.maxPolarAngle = Math.PI / 2.5;

				scene = new THREE.Scene();

				var light = new THREE.DirectionalLight( 0xffffff, 0.3 );
				light.position.set( 0, 0, 1000 );
				//scene.add( light );

				var light =  new THREE.HemisphereLight(0xffffff, 10 );
				light.position.set( 0, 0, 1000 );				
				scene.add( light );

				// world

				var material = new THREE.MeshLambertMaterial( { vertexColors: THREE.FaceColors } );	

				var geometry = new THREE.BoxGeometry( 100, 100, 100, 16, 16, 16 );

				var Cube = new THREE.Mesh( geometry, material ); 
				Cube.position.x = -100; 
				//scene.add( Cube );
				//objects.push( Cube );	


				var colorRed = new THREE.Color( 0xff0000 );	
				Brush = new THREE.Brush( colorRed, 10 );	
				Brush.draw( Cube );

				var material = new THREE.MeshLambertMaterial( { vertexColors: THREE.VertexColors } );			
				var geometry = new THREE.BoxGeometry( 100, 100, 100, 16, 16, 16 );

				var Cube = new THREE.Mesh( geometry, material ); 
				Cube.position.x = 100;
				//scene.add( Cube );
				//objects.push( Cube );

				var colorDarkBlue = new THREE.Color( 0x00008B );
				Brush.setColor( colorDarkBlue );
				Brush.draw( Cube );

				var colorGreen = new THREE.Color( 0x00ff00 );
				Brush.setColor( colorGreen );
				//Brush.setSize( 20 );

				var geometry = new THREE.SphereGeometry( 30, 36, 36 );				
				for ( var j = 0; j < count; j++ ) {
					colors.push( new THREE.Color( Math.random() * 0xffffff ) );	
					var material = new THREE.MeshPhongMaterial( { color: colors[ j ], shininess: 30 } );	
					var geometry = new THREE.CylinderGeometry( 7, 4, 20, 16 ); 
					var bank = new THREE.Mesh( geometry, material );
					bank.position.set( -90 + 20 * j, -50, 50 ); 
					scene.add( bank );
					banks.push( bank );
				}
				
				var man = createSnowman( 0 ); 
				man.position.set( -70, -70, 0 );
				scene.add( man ); 

				var man = createSnowman( 1 ); 
				man.position.set( 70, -70, 0 );
				scene.add( man );
				
				document.addEventListener( 'mousedown', onDocumentMouseDown, false );

				//

				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onDocumentMouseDown( event ) {

				var vector = new THREE.Vector3( ( event.clientX / window.innerWidth ) * 2 - 1, - ( event.clientY / window.innerHeight ) * 2 + 1, 0.5 );
				vector.unproject( camera );
				raycaster.set( camera.position, vector.sub( camera.position ).normalize() );

				var intersects = raycaster.intersectObjects( objects );

				if ( intersects.length > 0 ) {

					var item = objects.indexOf( intersects[ 0 ].object ); 
					console.log( ' item ' + item );
					colorsRight[ item ] = Brush.color;
					Brush.draw( intersects[ 0 ].object ); 

					var flag = true;
					for ( var j = 0; j < count; j++ ) {

						if ( colors[ j ] != colorsRight[ j ] ) flag = false;
				
					}
					
					if ( flag ) alert( 'Game over!' );
				//return;
				}


				var intersects = raycaster.intersectObjects( banks );

				if ( intersects.length > 0 ) {
				
					var item = banks.indexOf( intersects[ 0 ].object );
					console.log("NEW COLOR");
					Brush.setColor( colors[ item ] );

				}	
			}

			function createSnowman( number ) {

					var Snowman = new THREE.Object3D();

					var material = new THREE.MeshPhongMaterial( { vertexColors: THREE.VertexColors } );	
					var geometry = new THREE.SphereGeometry( 30, 36, 36 );
					var sphere1 = new THREE.Mesh( geometry, material );
					sphere1.position.set( 0, 30, 0 ); sphere1.name = 'sphere1';
					Snowman.add( sphere1 );

					var material = new THREE.MeshPhongMaterial( { vertexColors: THREE.VertexColors } );	
					var geometry = new THREE.SphereGeometry( 22, 36, 36 );
					var sphere2 = new THREE.Mesh( geometry, material ); 					
					sphere2.position.set( 0, 70, 0 ); sphere2.name = 'sphere2';				
					Snowman.add( sphere2 ); 
					
					var material = new THREE.MeshPhongMaterial( { vertexColors: THREE.VertexColors } );
					var geometry = new THREE.SphereGeometry( 16, 36, 36 );
					var sphere3 = new THREE.Mesh( geometry, material );				
					sphere3.position.set( 0, 103, 0 );	sphere3.name = 'sphere3';		
					Snowman.add( sphere3 ); 

					var material = new THREE.MeshPhongMaterial( { vertexColors: THREE.VertexColors } );
					var geometry = new THREE.SphereGeometry( 8, 16, 16 );
					var sphere4 = new THREE.Mesh( geometry, material);	 					
					sphere4.position.set( -25, 78, 0 );		
					Snowman.add( sphere4 ); sphere4.name = 'hand right';
					
					var material = new THREE.MeshLambertMaterial( { vertexColors: THREE.VertexColors } );
					var geometry = new THREE.SphereGeometry( 8, 16, 16 );					
					sphere5 = new THREE.Mesh( geometry, material );	
					sphere5.position.set( 25, 78, 0 );	
					Snowman.add( sphere5 ); sphere5.name = 'hand left';

					var material = new THREE.MeshLambertMaterial( { vertexColors: THREE.VertexColors } );
					var geometry = new THREE.CylinderGeometry( 1, 4, 20, 16 ); 
					var nose = new THREE.Mesh( geometry, material );	 	
					nose.position.set(0, 101, 23); nose.rotation.x = Math.PI / 2;
					nose.name = 'nose';
					Snowman.add( nose ); 

					var material = new THREE.MeshLambertMaterial( { vertexColors: THREE.VertexColors } );
					var geometry = new THREE.CylinderGeometry( 12, 17, 30, 24 ); 
					var bucket = new THREE.Mesh( geometry, material );	 		
					bucket.position.set(0, 125, -6 );  bucket.rotation.x = -Math.PI/11;
					Snowman.add( bucket ); bucket.name = 'bucket';

					// глаза		
					var material = new THREE.MeshLambertMaterial( { vertexColors: THREE.VertexColors } );
					var geometry = new THREE.SphereGeometry( 3, 16, 16 ); 
					var eye1 = new THREE.Mesh( geometry, material );					
					eye1.position.set( -8, 105, 13 ); eye1.name = 'eye1';		
					Snowman.add( eye1 );		
					
					var material = new THREE.MeshLambertMaterial( { vertexColors: THREE.VertexColors } );
					var geometry = new THREE.SphereGeometry( 3, 16, 16 ); 
					var eye2 = new THREE.Mesh( geometry, material );	
					eye2.position.set( 8, 105, 13 ); eye2.name = 'eye2';
					Snowman.add( eye2 );		

					// рот
					var material = new THREE.MeshLambertMaterial( { vertexColors: THREE.VertexColors } );
					var geometry = new THREE.CircleGeometry( 5, 5, 0, Math.PI );
					var mouth = new THREE.Mesh( geometry, material );
					mouth.rotation.z = Math.PI;
					mouth.position.set( 0, 97, 13 );
					Snowman.add( mouth ); 
					
					Snowman.name = 'Snowman';
					
					if ( number == 0 ) {
						for ( var i = 0; i < Snowman.children.length; i++ ) {
					
							Brush.setColor( colors[i] );
							Brush.draw( Snowman.children[i] );
						
						}				
					}
					
					if ( number == 1 ) {
						for ( var i = 0; i < Snowman.children.length; i++ ) {
					
							objects.push( Snowman.children[i] );	
						
						}				
					}					
		
					return Snowman;

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function animate() {

				requestAnimationFrame(animate);
				render();

			}


			function render() {

				//controls.update();
				renderer.render(scene, camera);

			}

		</script>

	</body>
</html>